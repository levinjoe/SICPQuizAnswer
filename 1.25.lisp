(define (search-for-primes-25 start end count)
    (define (timed-prime-test n)
	(newline)
        (display n)
	(start-prime-test n (runtime)))
    (define (start-prime-test n start-time)
	(if (fast-prime? n 10000)
	    (report-prime (- (runtime) start-time))
	    0))
    (define (report-prime elapsed-time)
	(display " *** ")
        (display elapsed-time)
	1)
    (define (search-iter start end count)
	(if (or (> start end) (= count 0))
	    0
	    (if (= (timed-prime-test start) 1)
		(search-iter (+ start 1) end (- count 1))
		(search-iter (+ start 1) end count))))
    (search-iter start end count))
(define (expmod base exp m)
    (remainder (fast-expt base exp) m))
(define (fast-expt base exp)
	(cond ((= exp 0) 1)
	      ((even? exp)
	       (square (fast-expt base (/ exp 2))))
	      (else
	       (* base (fast-expt base (- exp 1))))))
(define (fast-prime? n times)
	(cond ((= times 0) true)
	      ((fermat-test n) (fast-prime? n (- times 1)))
	      (else false)))
(define (fermat-test n)
	(define (try-it a)
	    (= (expmod a n n) a))
      (try-it (+ 1 (random (- n 1)))))