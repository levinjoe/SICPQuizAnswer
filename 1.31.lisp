(define (product term a next b)
    (define (iter a result)
	(if (> a b)
	    result
	    (iter (next a) (* result (term a)))))
  (iter a 1.0))
(define (product-recursive term a next b)
    (if (> a b)
	1.0
	(* (term a) 
	   (product-recursive term (next a) next b))))
(define (product-pi-term index)
    (/ (* (+ 2.0 (* index 2)) 
	  (+ 4.0 (* index 2)))
       (square (+ 3.0 (* index 2)))))
(define (next a)
    (+ a 1))
(define (product-pi n)
    (product product-pi-term 0 next n))
(define (product-pi-recur n)
    (product-recursive product-pi-term 0 next n))