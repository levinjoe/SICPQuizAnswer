(define (filter-accumulate-i combiner null-value term a next b filter)
    (define (iter a result)
	(if (> a b)
	    result
	    (if (filter a)
		(iter (next a) (combiner result (term a)))
		(iter (next a) result))))
  (iter a null-value))

(define (filter-accumulate-r combiner null-value term a next b filter)
    (define (recur a)
	(if (> a b)
	    null-value
	    (if (filter a)
		(combiner (term a) 
		      (recur (next a)))
		(recur (next a)))))
  (recur a))

(define (prime? n)
	(= n (smallest-divisor n)))
(define (smallest-divisor n)
    (define (find-divisor n test-divisor)
	(cond ((> (square test-divisor) n) n)
	      ((divides? test-divisor n) test-divisor)
	      (else (find-divisor n (+ test-divisor 1)))))
  (define (divides? a b)
      (= (remainder b a) 0))
  (find-divisor n 2))
(define (sum-prime-i a b)
    (define (next a)
	(+ a 1))
  (define (combine x y)
      (+ x y))
  (define (term x)
      x)
  (filter-accumulate-i combine 0 term a next b prime?))
(define (sum-prime-r a b)
    (define (next a)
	(+ a 1))
  (define (combine x y)
      (+ x y))
  (define (term x)
      x)
  (filter-accumulate-r combine 0 term a next b prime?))

(define (gcd a b)
    (if (= b 0)
	a
	(gcd b (remainder a b))))

(define (sum-gcd-n-i n)
    (define (next x)
	(+ 1 x))
  (define (combine x y)
      (* x y))
  (define null-value 1.0)
  (define (term x)
      x)
  (define (gcd-filter x)
      (= (gcd x n) 1))
  (filter-accumulate-i combine null-value term 2 next n gcd-filter))
(define (sum-gcd-n-r n)
    (define (next x)
	(+ 1 x))
  (define (combine x y)
      (* x y))
  (define null-value 1.0)
  (define (term x)
      x)
  (define (gcd-filter x)
      (= (gcd x n) 1))
  (filter-accumulate-r combine null-value term 2 next n gcd-filter))