(define (accumulate-i combiner null-value term a next b)
    (define (iter a result)
	(if (> a b)
	    result
	    (iter (next a) (combiner result (term a)))))
  (iter a null-value))

(define (accumulate-r combiner null-value term a next b)
    (if (> a b)
	null-value
	(combiner (term a) 
	   (accumulate-r combiner null-value term (next a) next b))))

(define (product-combiner x y)
    (* x y))
(define (product-i term a next b)
    (accumulate-i product-combiner 1.0 term a next b))
(define (product-r term a next b)
    (accumulate-r product-combiner 1.0 term a next b))
(define (sum-combiner x y)
    (+ x y))
(define (sum-i term a next b)
    (accumulate-i sum-combiner 0 term a next b))
(define (sum-r term a next b)
    (accumulate-r sum-combiner 0 term a next b))
(define (product-pi-term index)
    (/ (* (+ 2.0 (* index 2)) 
	  (+ 4.0 (* index 2)))
       (square (+ 3.0 (* index 2)))))
(define (next a)
    (+ a 1))
(define (product-pi-i n)
    (product-i product-pi-term 0 next n))
(define (product-pi-r n)
    (product-r product-pi-term 0 next n))
(define (sum-sq-n-i n)
    (sum-i square 1 next n))
(define (sum-sq-n-r n)
    (sum-r square 1 next n))